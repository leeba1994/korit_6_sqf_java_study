package com.study.java_study.ch11_추상화02;

/*
1. 추상화
추상화는 클래스들의 공통적인 요소를 뽑아서 상위 클래스를 만들어내는 것이다.
반드시 상위 클래스일 필요는 없어서, 공통적인 속성과 기능을 정의한 하위 클래스를 생성할 수도 있다.
한 마디로 추상화는 공통적인 속성과 기능을 정의함으로써 코드의 중복을 줄이고, 클래스 간 관계를 효과적으로 설정하고,
유지/보수를 용이하게 하는 것이다. 자바에서는 추상 클래스와 인터페이스라는 문법 요소를 통해 추상화를 구현한다.


2. abstract 제어자
abstract는 주로 클래스와 메서드에 붙이는 키워드인데, 이것을 붙이면 자동으로 '추상 클래스'와 '추상 메서드'가 된다.
abstract는 '추상적인'이라는 사전적인 의미가 있지만,
핵심은 '미완성'이라는 개념에 있다. abstract class 클래스명 { ... }와 같이 클래스 선언부가 작성되어 있으면
이것은 미완성된 추상 클래스이므로 상속을 통해 내부의 추상 메서드를 구현해줘야한다는 점을 알 수 있다.
(추상 메서드가 없더라도 키워드를 붙여서 추상 클래스로 지정할 수 있다. 다만 메서드 바디가 완성 되기 전까지는 이를 기반으로 한 인스턴스 생성이 불가하다.)

    추상클래스
    1. 클래스에 추상메소드가 하나라도 정의되어있으면 추상클래스로 정의해야한다.
    2. 추상클래스는 생성할 수 없다.
    3. 일반 클래스와 정의 할 수 있는 맴버변수, 맴버메소드는 동일하다.
    4. 추상클래스라고 해서 무조건 추상 메소드를 가지고 있어야하는 것은 아니다.
    5. 추상클래스를 상속 받은 클래스는 추상메소드를 모두 구현하거나 해당 클래스도 추상클래스로 정의하여야한다.


 */


public abstract class Animal {

    private String name;

    public abstract void move();        //자식한테 틀만 제공하기위한, abstract메소드에 지정시  클레스도 abstract클래스을 지정해야한다

    public void eat() {
        System.out.println("동물이 밥을 먹습니다.");
    }
}
